name: IOS Build

on:
    workflow_dispatch:

permissions:
    contents: write

jobs:
    build:
        name: Build app
        runs-on: macos-latest
        env:
            VITE_API_URL: ${{ vars.API_URL }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "20"

            - name: Build web
              run: |
                  npm install
                  npm run build
                  npx cap sync

            # - name: Recreate ios project
            #   run: |
            #       rm -rf ios
            #       npx cap add ios

            - name: Install CocoaPods
              run: sudo gem install cocoapods

            - name: Install pod dependencies
              run: |
                  cd ios/App
                  pod install

            - name: Import code sign
              uses: apple-actions/import-codesign-certs@v3
              with:
                  p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
                  p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

            - name: Download provisioning
              uses: Apple-Actions/download-provisioning-profiles@v1
              with:
                  bundle-id: com.sealup.app
                  issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
                  api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
                  api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

            - name: Build Project
              run: |
                  cd ios/App
                  project_name=$(xcodebuild -list -json | jq -r '.project.schemes[0]')
                  xcodebuild -workspace App.xcworkspace -scheme "$project_name" clean archive -configuration Release -archivePath App.xcarchive CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="iPhone Distribution" DEVELOPMENT_TEAM=2CFKYLNGCB PROVISIONING_PROFILE_SPECIFIER=sealupprofile

            - name: Create IPA
              run: |
                  cd ios/App
                  archive_path="App.xcarchive"
                  source_dir="${archive_path%/}/Products/Applications"
                  new_folder="Payload"
                  rm -rf $new_folder
                  mkdir $new_folder
                  cp -a $source_dir/* $new_folder
                  zip -rmq "App.ipa" $new_folder
                  cd ../../
                  mkdir -p build
                  mv ios/App/App.ipa build/

            - name: Upload to TestFlight
              uses: Apple-Actions/upload-testflight-build@master
              with:
                  app-path: build/App.ipa
                  api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
                  issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
                  api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

            - name: Push
              uses: s0/git-publish-subdir-action@develop
              env:
                  REPO: self
                  BRANCH: build # The branch name where you want to push the assets
                  FOLDER: build # The directory where your assets are generated
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
                  MESSAGE: "Build: ({sha}) {msg}" # The commit message
